{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SACAD,EAAAE,OAAOC,KAAK,CACRC,MAAO,QACPC,SAAU,gBACVC,SAAU,QACVC,qBAAsB,IACtBC,QAAS,IAEb,IAAMC,EAASC,SAASC,cAAc,SACtCF,EAAOG,iBAAiB,UAMxB,SAAsBC,GACpBA,EAAMC,iBACNC,GAAcF,EAAMG,cAAcC,SAASC,MAAMC,MACjDC,GAASP,EAAMG,cAAcC,SAASI,KAAKF,MAC3CG,GAAUT,EAAMG,cAAcC,SAASM,OAAOJ,MAIhD,WAEI,I,kBAcJ,IAAuBd,EAAUmB,GAAVnB,EAbHoB,EAaaD,EAbVE,EAcd,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEvB,WAAUa,MAAAM,IAEpBK,EAAO,CAAExB,WAAUa,MAAAM,G,GAEpBA,E,KArBES,MAAK,SAAAC,GAAWA,EAAR7B,S,IAAU8B,EAAKD,EAALhB,MACjBlB,EAAAE,OAAOkC,QAAQ,uBAAiCC,OAARZ,EAAE,QAAYY,OAANF,EAAM,M,IAEvDG,OAAM,SAAAJ,GAAWA,EAAR7B,S,IAAUkC,EAAKL,EAALhB,MAClBlB,EAAAE,OAAOsC,QAAQ,sBAA8BH,OAARZ,EAAE,QAAYY,OAANE,EAAM,M,IAEnDb,GAAgBN,EAChBX,EAAOgC,O,EAVTf,EAAeX,EACV2B,EAAI,EAAGA,GAAKpB,EAAQoB,GAAK,EAACC,EAAAD,E,CALrCE,E,IATF,IAAI7B,EAAa,GACbK,EAAQ,GACRE,EAAS,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nNotify.init({\n    width: '560px',\n    position: 'center-center',\n    distance: '100px',\n    cssAnimationDuration: 2000,\n    opacity: 1,\n  });\nconst formEl = document.querySelector('.form');\nformEl.addEventListener('submit', onFormSubmit);\n\nlet firstDelay = '';\nlet delay = '';\nlet amount = '';\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  firstDelay = +event.currentTarget.elements.delay.value;\n  delay = +event.currentTarget.elements.step.value;\n  amount = +event.currentTarget.elements.amount.value;\n  rasePromise();\n}\n\nfunction rasePromise() {\n    let currentDelay = firstDelay;\n    for (let i = 1; i <= amount; i += 1) {\n      createPromise(i, currentDelay)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${i} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${i} in ${delay}ms`);\n        })\n          currentDelay += delay;\n          formEl.reset();\n    }\n}\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$h6c0i","parcelRequire","Notify","init","width","position","distance","cssAnimationDuration","opacity","$ce04d3a99e08e73b$var$formEl","document","querySelector","addEventListener","event","preventDefault","$ce04d3a99e08e73b$var$firstDelay","currentTarget","elements","delay","value","$ce04d3a99e08e73b$var$delay","step","$ce04d3a99e08e73b$var$amount","amount","delay3","i","currentDelay","Promise","resolve","reject","setTimeout","Math","random","then","param","delay1","success","concat","catch","delay2","failure","reset","i1","_loop","$ce04d3a99e08e73b$var$rasePromise"],"version":3,"file":"03-promises.2dbe7693.js.map"}